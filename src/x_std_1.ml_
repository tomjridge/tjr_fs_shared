(** Common types we use in examples 

Standard types: t = lwt; blk=ba_buf; r=blk_id 

*)

[@@@warning "-32"]

open Buf_ops
open Blk_intf

type t = lwt
type blk = ba_buf
type blk_id = Blk_intf.Blk_id_as_int.blk_id[@@deriving bin_io, yojson]
type r = blk_id[@@deriving bin_io, yojson]
type buf = ba_buf

module B = Blk_intf.Blk_id_as_int

(** NOTE we typically abbreviatte when there are 3 or more params *)

type blk_dev_ops' = (blk_id,blk,t)blk_dev_ops
(* type nonrec blk_allocator_ops = (r,t)blk_allocator_ops *)


let monad_ops = lwt_monad_ops
let async = With_lwt.async
let event_ops = With_lwt.event_ops

let r_cmp : r -> r -> int = Stdlib.compare
let r_size = 9
let r_cmp : r -> r -> int = Stdlib.compare
let r_size = 9 (* max size of r=blk_id when marshalled *)

let buf_ops = Buf_factory.Buf_as_bigarray.ba_buf_ops
let blk_ops = Blk_factory.make_3()
let blk_sz = Blk_intf.blk_sz_4096
let buf_to_blk : buf->blk = fun x -> x
let blk_to_buf : blk->buf = fun x -> x
let buf_create = fun () -> buf_ops.create (Blk_sz.to_int blk_sz)

let make_blk_allocator: blk_id ref -> (r,t)blk_allocator_ops = fun b_ref ->    
  let open With_lwt in
  let blk_alloc () = 
    let r = !b_ref in
    B.incr b_ref;
    return r
  in
  let blk_free blk_id = 
    (* FIXME do nothing for this simple allocator *)
    return ()
  in
  { blk_alloc; blk_free }

(*
class std = object (self)
  method r_cmp = r_cmp
  method r_size = r_size
  method buf_ops = buf_ops
  method monad_ops = monad_ops
  method async = async
  method event_ops = event_ops
  method blk_ops = blk_ops
  method blk_sz = blk_sz
  method buf_to_blk = buf_to_blk
  method blk_to_buf = blk_to_buf
  method buf_create = buf_create
  method make_blk_allocator = make_blk_allocator
end    
*)
(* FIXME perhaps just blk_dev_ops and blk_allocator_ops ? *)
(*
type nonrec std_blk_dev_ops = (blk_id,blk,t)blk_dev_ops
type nonrec std_blk_allocator_ops = (r,t)blk_allocator_ops
*)


