(* A linear partition of a key space; this is used in the B-tree to implement nodes. 


From a list r0 k0 r1 k1 ... kn rn+1, we have a partition of the space K into:

- below k0
- k0 <= _ < k1
- k1 <= _ < k2
- ...
- kn <= _

And the corresponding map: fun k -> if k < k0 then r0 else ...

------------

Operations we need to support: 

- find(k); we also need to be able to retrieve the actual key that
  matched k (see below)
- add(intv,r): change the value for interval intv
- merge(intv1,intv2,r): for two adjacent intervals, merge (assuming at
  least one key remains)
- split(intv,r1,k1,r2): split the interval intv (delete old interval,
  add two new intervals)
  - refine_below(r0,k0): split Less_than(k) into Less_than(k0) and Between(k0,k)
  - refine_above(kn,rn): ditto, vice versa
- adjust_midpoint(intv1,intv2,r1,k1,r2)- for steal cases; equivalent
  to deleting two intvs then adding two
- get size, and split into two partitions (subject to some size
  constraints etc on each partition)

It may be simpler to implement these operations via conversion to
lists? But this seems a bit awful.

For the steal/merge-left cases, we need to be able to navigate to the
immediately-preceding interval. And similarly, we need to be able to
navigate to the immediately-following interval. Given an interval, the
immediately-following interval can be derived. However, for the
immediately preceeding interval, we probably have to maintain a "pred"
map. This could be done in-map (eg as extra info in the value
component of a map entry), or outside (as a separate map that is
updated independently). Alternatively, we could accept a "key" that is
semantically "slightly less than" some given key. This would allow to
locate the "previous" interval fairly directly.

At any rate, we probably need:

- next_intv(intv): intv option
- prev_intv(intv): intv option
*)

let dest_Some x = match x with Some x -> x | _ -> failwith "dest_Some"

(* FIXME should be called "interval"? *)
type 'k intv = 
  | Less_than of 'k  (* lt *)
  | Between of 'k * 'k  (* k1 <= _ < k2 *)
  | Greater_eq of 'k  (* k1 <= _ *)

type ('k,'r) lin_partition = ('k intv, 'r) Tjr_polymap.t

let rec key_compare k_cmp k1 k2 =
  match k1,k2 with 
  | Less_than k1, Less_than k2 ->
    (* there is only one "less_than" interval *)
    assert(k_cmp k1 k2 = 0);
    0
  | Less_than k1, Between (k2,k3) -> 
    (* the less than interval is below all other intervals *)
    assert (k_cmp k1 k2 <= 0);
    -1
  | Less_than k1, Greater_eq k2 -> 
    assert (k_cmp k1 k2 <= 0);
    -1
  | Between _, Less_than _ -> 
    1
  | Between(k2,k3), Between(k4,k5) -> 
    k_cmp k2 k4
  | Between(k2,k3), Greater_eq k4 -> 
    assert(k_cmp k2 k4 < 0);
    -1
  | Greater_eq _, Less_than _ 
  | Greater_eq _, Between _ -> 
    1
  | Greater_eq k1, Greater_eq k2 -> 
    assert (k_cmp k1 k2 = 0);
    0

(* lower/upper bounds *)
let get_bound intv = 
  match intv with
  | Less_than k -> (None,Some k)
  | Between(k1,k2) -> (Some k1, Some k2)
  | Greater_eq k -> (Some k, None)

let in_interval k_cmp k intv = 
  let (l,u) = get_bound intv in
  (match l with None -> true | Some l -> k_cmp l k <= 0) &&
  (match u with None -> true | Some u -> k_cmp k u < 0)

(* This is actually fundamental *)
(*
let get_midpoint_of_adjacent_intervals_opt intv1 intv2 =
  match intv1,intv2 with
  | Less_than k1, Between(k2,_)
  | Less_than k1, Greater_eq(k2)
  | Between(_,k1),Between(k2,_)
  | Between(_,k1),Greater_eq(k2)
    when k1 = k2 -> (* NOTE the when clause covers all the preceding patterns *)
    Some k1
  | _ -> None
*)

let get_midpoint_of_adjacent_intervals_opt intv1 intv2 =
  match get_bound intv1,get_bound intv2 with
  | (_,Some k1),(Some k2,_) when k1=k2 -> Some k1
  | _ -> None


let adjacent intv1 intv2 =
  get_midpoint_of_adjacent_intervals_opt intv1 intv2 <> None

let get_midpoint_of_adjacent_intervals intv1 intv2 =
  get_midpoint_of_adjacent_intervals_opt intv1 intv2 |> dest_Some

let merge_adjacent intv1 intv2 = 
  assert(adjacent intv1 intv2);
  match intv1,intv2 with
  | Less_than k1, Between(k2,k3) -> Less_than(k3)
  | Less_than k1, Greater_eq(k2) -> failwith "merge_adjacent: attempt to merge Less_than and Greater_eq"
  | Between(k1,k2),Between(_,k3) -> Between(k1,k3)
  | Between(k1,_),Greater_eq(k2) -> Greater_eq(k1)
  | _ -> failwith "impossible, since adjacent intv1 intv2"

(* NOTE k_cmp only necessary for asserts *)
let split_intv k_cmp intv k = 
  assert(in_interval k_cmp k intv);
  match intv with 
  | Less_than k' -> 
    assert(k_cmp k k' < 0);
    (Less_than k,Between(k,k'))
  | Between(k1,k2) -> 
    assert(k_cmp k1 k < 0);
    (Between(k1,k),Between(k,k2))
  | Greater_eq k' -> 
    assert(k_cmp k' k < 0);
    Between(k',k),Greater_eq(k)
      

module IgnoreA(_:sig end) = struct
  let examples = [Less_than 0; Between(0,1); Between(1,2); Greater_eq(2)]

  let pairs = 
    examples |> List.map (fun x -> examples |> List.map (fun y -> (x,y)))
    |> List.concat

  let _ = 
    List.map (fun (x,y) -> x,y,key_compare Tjr_int.compare x y) pairs
    |> fun x -> 
    assert(x=[(Less_than 0, Less_than 0, 0); (Less_than 0, Between (0, 1), -1);
              (Less_than 0, Between (1, 2), -1); (Less_than 0, Greater_eq 2, -1);
              (Between (0, 1), Less_than 0, 1); (Between (0, 1), Between (0, 1), 0);
              (Between (0, 1), Between (1, 2), -1); (Between (0, 1), Greater_eq 2, -1);
              (Between (1, 2), Less_than 0, 1); (Between (1, 2), Between (0, 1), 1);
              (Between (1, 2), Between (1, 2), 0); (Between (1, 2), Greater_eq 2, -1);
              (Greater_eq 2, Less_than 0, 1); (Greater_eq 2, Between (0, 1), 1);
              (Greater_eq 2, Between (1, 2), 1); (Greater_eq 2, Greater_eq 2, 0)]
          );
    x
;;
end

let rec iter_opt f x =
  match f x with
  | Some x -> iter_opt f x
  | None -> x

(* we require at least one key and two r *)
let make_map k_cmp ks rs =
  assert(List.length ks >=1);
  assert(List.length ks +1 = List.length rs);
  let map = Tjr_polymap.empty (key_compare k_cmp) in
  let map = 
    (* deal with <k0 maps to r0 *)
    let k0,r0 = List.hd ks,List.hd rs in
    Tjr_polymap.add (Less_than k0) r0 map
  in
  (* now do the "betweens" *)
  iter_opt 
    (fun (map,ks,rs) -> 
       match (ks,rs) with 
       | k1::k2::_,r2::_ -> 
         Some(Tjr_polymap.add (Between(k1,k2)) r2 map, List.tl ks, List.tl rs)
       | _ -> None)
    (map,ks,List.tl rs)
  |> fun (map,[kn],[rn]) -> 
  Tjr_polymap.add (Greater_eq kn) rn map  [@@ocaml.warning "-8"]


(* test ------------------------------------------------------------- *)

module IgnoreB(_:sig end) = struct
  let ex_map = make_map Tjr_int.compare [0;1;2;3] ["r0";"r1";"r2";"r3";"r4"]

  let ex_intvs = [Less_than 0; Between(0,1); Between(1,2); Between(2,3); Greater_eq(3)]

  let _ = 
    ex_intvs 
    |> List.map (fun intv -> Tjr_polymap.find intv ex_map)
    |> fun x ->
    assert(x=["r0"; "r1"; "r2"; "r3"; "r4"]);
    x
  ;;
end


(* predecessor / successor relationship ----------------------------- *)

(* maintain a set of pairs (pred,succ)? or two maps? let's maintain a
   single map for the time being, for predecessor

  but the map already has (essentially) this structure; even so,
   perhaps better to separate out *)

(* this assumes there is some underlying order, and we just track a finite subset of this order *)
type ('k,'t) pred_succ_ops = {
  empty: unit -> 't;
  get_pred: 'k -> 't -> 'k option * bool;  (* bool indicates whether the key was in the set already *)
  get_succ: 'k -> 't -> 'k option;
  get_intv: 'k -> 't -> 'k intv;
  insert: 'k -> 't -> 't;
  remove: 'k -> 't -> 't;
  elements: 't -> 'k list;
}


(* implement the above using a set *)
open Tjr_poly_set 

type ('k,'t) set_ops = ('k,'t)Tjr_poly_set.set_ops

(* FIXME the use of split is rather inefficient FIXME what is the cost
   of the split operation? FIXME perhaps better to search with a
   special k-delta key to get pred etc. *)
let make_pred_succ_ops set_ops =
  let empty () = set_ops.empty in
  let get_pred k t = set_ops.split k t |> fun (lower,present,_) -> set_ops.max_elt_opt lower,present in
  let get_succ k t = set_ops.split k t |> fun (_,_,higher) -> set_ops.min_elt_opt higher in
  let get_intv k t = 
    let (p,b),s = get_pred k t, get_succ k t in
    match b with
    | true -> (
        (* k is present *)
        match s with
        | None -> Greater_eq(k)
        | Some k' -> Between(k,k'))
    | false -> (
        (* k is not present *)
        match p with 
        | None -> (            
          assert(s <> None);
          Less_than(dest_Some s))
        | Some k' -> (
            match s with
            | None -> Greater_eq(k')
            | Some k'' -> Between(k',k'')))
  in
  let insert k t = set_ops.add k t in
  let remove k t = set_ops.remove k t in
  let elements t = set_ops.elements t in
  { empty; get_pred; get_succ; get_intv; insert; remove; elements }

let _=  make_pred_succ_ops


(* example/test with ints ------------------------------------------- *)

module IgnoreC(_:sig end) = struct

  let set_ops = Tjr_poly_set.make_set_ops (None:Tjr_set.Int_set.t option) (Tjr_int.compare)

  let pred_succ_ops = make_pred_succ_ops set_ops

  let _ = 
    let { empty; get_pred; get_succ; get_intv; insert; remove; elements } = pred_succ_ops in
    let i2s i = match i with
      | None -> "-"
      | Some i -> string_of_int i
    in
    let print_state t = 
      elements t |> List.iter (fun x ->
          Printf.printf "Elt %d: pred=%s; succ=%s\n" 
            x 
            (get_pred x t |>fst|>i2s) 
            (get_succ x t |>i2s))
    in    
    iter_opt 
      (fun (t,ops) -> 
         match ops with 
         | [] -> None
         | op::ops -> 
           let t' = op t in
           Some(t',ops))
      (empty (),
       [insert 2;
        insert 4;
        insert 6;
        (fun t -> Printf.printf "%s\n" __LOC__; print_state t; t);
        remove 4;
        (fun t -> Printf.printf "%s\n" __LOC__; print_state t; t);
        remove 2;
        (fun t -> Printf.printf "%s\n" __LOC__; print_state t; t);
        insert 10;
        insert 11;
        remove 10;
        (fun t -> Printf.printf "%s\n" __LOC__; print_state t; t);
       ])
;;

end


(* At this point, we have:

- a map from intervals
- a pred/succ mapping

So, given a key k, we can get the range k1 <= k < k2 (or other), and get the corresponding r.

Operations:

| find(k)                               | get intv for k; lookup intv                       | 
| add(intv,r)                           | replace intv binding in map                       | 
| merge_adjacent(intv1,intv2,r)                  | remove intvs; add(intv,r); adjust pred/succ       | 
| split(intv,r1,k1,r2)                  | remove intv; add new intvs; adjust pred/succ      | 
| adjust_midpoint(intv1,intv2,r1,k1,r2) | remove two intvs; add two intvs; adjust pred/succ | 
| get size                              | pred/succ.elements gives size                     | 
| split into two                        | map has a split operation, and also set; use these to implement split | 

*)

(* Use the term "keyspace"; FIXME better options? *)
type ('k,'r,'t) keyspace_ops = {
  find: 'k -> 't -> 'r; (* NOTE total *)
  add: 'k intv -> 'r -> 't -> 't;
  ks_merge_adjacent: 'k intv -> 'k intv -> 'r -> 't -> 't;
  ks_split_intv: 'k intv -> 'r*'k*'r -> 't -> 't;
  adjust_midpoint: 'k intv -> 'k intv -> 'r*'k*'r -> 't -> 't;
(*  k_size: 't -> int;
  split_keyspace: 't -> 't * 'k * 't; *)
}

type ('a,'b) pair = {
  lin_partition: 'a;
  pred_succ: 'b
}

let make_keyspace_ops ~(k_cmp:'k -> 'k -> int) ~pred_succ_ops:ps_ops : ('k,'r,(('k,'r)lin_partition,'pred_suc)pair)keyspace_ops =
  (* implement using a pair of a lin partition and a pred/succ set *)
  let find k t = 
    let intv = ps_ops.get_intv k t.pred_succ in
    Tjr_polymap.find intv t.lin_partition
  in
  let add intv r t =
    {t with lin_partition=Tjr_polymap.add intv r t.lin_partition}
  in
  let ks_merge_adjacent intv1 intv2 r t =
    assert(adjacent intv1 intv2);
    let intv = merge_adjacent intv1 intv2 in
    let lin_partition =
      t.lin_partition
      |> Tjr_polymap.remove intv1
      |> Tjr_polymap.remove intv2
      |> Tjr_polymap.add intv r
    in
    let pred_succ =
      (* let midpt of intv1 intv2 be k; we just have to delete k *)
      let k = get_midpoint_of_adjacent_intervals intv1 intv2 in
      t.pred_succ 
      |> ps_ops.remove k
    in
    { lin_partition; pred_succ }
  in
  let _ = ks_merge_adjacent in
  let ks_split_intv intv (r1,k,r2) t =
    let intv1,intv2 = split_intv k_cmp intv k in
    let lin_partition =
      t.lin_partition
      |> Tjr_polymap.remove intv
      |> Tjr_polymap.add intv1 r1
      |> Tjr_polymap.add intv2 r2
    in
    let pred_succ =
      (* just add k *)
      t.pred_succ |> ps_ops.insert k
    in
    { lin_partition; pred_succ }
  in
  let _ = ks_split_intv in
  let adjust_midpoint intv1 intv2 (r1,k,r2) t =
    let dummy_r = r1 in
    t
    |> ks_merge_adjacent intv1 intv2 dummy_r
    (* |> ks_split_intv (merge_adjacent intv1 intv2) (r1,k,r2) *)
  in
  let _ = adjust_midpoint in
  (* fun k -> k ~find ~add ~ks_merge_adjacent ~ks_split_intv ~adjust_midpoint *)
  { find; add; ks_merge_adjacent; ks_split_intv; adjust_midpoint } 

let _ = make_keyspace_ops
      

(* FIXME why is this all so horrible? *)
